import os.path

import tornado.ioloop
import tornado.web
import tornado.options
import tornado.httpserver

import pymongo
import mongoengine

from tornado.options import define, options
define("port", default=8000, help="run on the given port", type=int)

class Application(tornado.web.Application):
    
    def __init__(self):
        handlers = [ 
            (r'/', IndexHandler),
            (r'/schedules', ScheduleListHandler),
            ]
        settings = dict(
            template_path = os.path.join(os.path.dirname(__file__),'templates'),
            static_path = os.path.join(os.path.dirname(__file__),'static'),
            debug = True
            )
        mongoengine.connect('challenger')
        tornado.web.Application.__init__(self,handlers,**settings)

class Challenge(mongoengine.Document):
    date_start = mongoengine.DateTimeField()
    date_end = mongoengine.DateTimeField()
    header = mongoengine.StringField(max_length=150, required = True)
    points = mongoengine.ListField(mongoengine.EmbeddedDocumentField(ChallengePoint))
  
    
class ChallengePoint(mongoengine.EmbeddedDocument):
    title = mongoengine.StringField(required = True)
    done = mongoengine.BooleanField()
    required_time = mongoengine.IntField()
            

class IndexHandler(tornado.web.RequestHandler):
    def get(self):
        self.render('index.html')
        
class ScheduleListHandler(tornado.web.RequestHandler):
    def get(self):
        self.render('schedule_list.html',
                    challenges = Challenge.objects)

def main():
	tornado.options.parse_command_line()
	http_server = tornado.httpserver.HTTPServer(Application())
	http_server.listen(options.port)
	tornado.ioloop.IOLoop.instance().start()

if __name__ == "__main__":
	main()


#def clean(self):
    #if self.date_start >= self.date_end:
#         raise ValidationError('Date_start is more or equal to the end_date.')
